;==========MAIN========================

        zero    R0
        a       R1
        b       R2
        c       R3
        num_of_roots    R4
        minus_1         R31
        infinity_roots  R30

;--------------------------------------
        LDI zero, 0
        
        CLR a
        CLR b
        CLR c
        
        PUSH_NUM 1
        PUSH_NUM 0
        SUB_STACK
        POP minus_1                     
        MOV infinity_roots, minus_1 ; now infinity_roots = -1

;--------------------------------------
        ;OUT minus_1
        IN a
        IN b
        IN c
        
        CALL square_solve
        
        OUT num_of_roots                ; number of roots
        
        CP num_of_roots, infinity_roots
        BREQ main_end
                                        ; countable roots (or 0)
        CP num_of_roots, zero
        BREQ main_end
                                        ; there are 1 or 2 roots
        OUT_STACK                       ; printing first root
        POP_STACK
        DEC num_of_roots
        CP num_of_roots, zero
        BREQ main_end
                                        ; there are 2 roots
        OUT_STACK                       ; printing second root
        POP_STACK
        
main_end:
        END

;==========LINE-SOLVER=================
        
line_solve:        
        ; extern a
        ; extern b
        ; extern zero
        ; extern infinity_roots
        ; extern num_of_roots R3
        
        CP a, zero
        BRNE LN_a_is_not_0
                                        ; here a = 0
            CP b, zero
            BRNE LN_b_is_not_0
                                        ; here b = 0
                MOV num_of_roots, infinity_roots
                RET
LN_b_is_not_0:
            CLR num_of_roots
            RET
LN_a_is_not_0:
        SER num_of_roots
        CP b, zero
        BRNE LN_b_is_not_0_a_is
            PUSH_NUM 0
            RET
LN_b_is_not_0_a_is:
        PUSH a  
        PUSH b
        DIV_STACK
        PUSH minus_1
        MUL_STACK                       ; now -b/a is in stack
        RET

;==========SQUARE-SOLVER===============

square_solve:
        ; extern a
        ; extern b
        ; extern c
        ; extern zero
        ; extern infinity_roots
        sign R29
        CLR sign
        
        discriminant R5
        CLR discriminant
        
        CP a, zero
        BRNE SQ_a_is_not_0
                                        ; here a = 0
            MOV a, b
            MOV b, c
            CALL line_solve
            RET
SQ_a_is_not_0:
        CP c, 0
        BRNE SQ_c_is_not_0
                                        ; here c = 0
            PUSH_NUM 0
            CALL line_solve
            CP_STACK
            BREQ SQ_line_root_0
                INC num_of_roots
SQ_line_root_0:
dump
            RET
SQ_c_is_not_0:
        CP b, zero
        BRNE SQ_b_is_not_0
            PUSH a
            PUSH c
dump
            MUL_STACK
dump
            POP sign
            CP sign, zero
            BRMI SQ_c_and_a_diff_sign
                CLR num_of_roots
                RET
SQ_c_and_a_diff_sign:
            LDI num_of_roots, 2
            PUSH c
            PUSH a
            DIV_STACK
            PUSH minus_1
            MUL_STACK
            SQRT_STACK
            
            COPY_STACK
            PUSH_NUM 0
            SUB_STACK
dump
            RET
SQ_b_is_not_0:
        PUSH_NUM 4
        PUSH a
        MUL_STACK
        PUSH c
        MUL_STACK
        
        PUSH b
        PUSH b
        MUL_STACK
        
        SUB_STACK
        POP discriminant
        PUSH discriminant
        
dump
        
        CP discriminant, zero
        BRMI SQ_D_less_0
            BREQ SQ_D_is_0
                LDI num_of_roots, 2
                SQRT_STACK
                
dump
                
                PUSH minus_1
                PUSH b
                MUL_STACK
                ADD_STACK
                PUSH a
                PUSH_NUM 2
                MUL_STACK
                SWAP_STACK
                DIV_STACK
                
dump
                
                COPY_STACK
                PUSH a
                PUSH b
                DIV_STACK
                ADD_STACK
                PUSH minus_1
                MUL_STACK
dump
                RET
SQ_D_is_0:
            SER num_of_roots
            
            PUSH a
            PUSH_NUM 2
            MUL_STACK
            PUSH b
            DIV_STACK
            PUSH minus_1
            MUL_STACK
dump
            RET
SQ_D_less_0:
        CLR num_of_roots
        RET     
